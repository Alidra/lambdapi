(; Data type of booleans. ;)

B : Type.

true : B.
false : B.

(; Data type of natural numbers. ;)

N : Type.

0 : N.
s : N -> N.

def 1 := s 0.

(; Addition on natural numbers. ;)

def add : N -> N -> N.

add 0 ?x --> ?x.
add (s ?x) ?y --> s (add ?x ?y).

#EVAL (add (s 1) (s 1)).

(; Type of data type codes and their interpretation as types. ;)

U : Type.

def T : U -> Type.

bool : U.

T bool --> B.

nat : U.

T nat --> N.

pi : !a : U, (T a -> U) -> U.

T (pi ?a ?f) --> !x:T ?a, T (?f x).

(; Type of propositions and their interpretation as types. ;)

Prop : Type.

def P : Prop -> Type.

all : !a:U, (T a -> Prop) -> Prop.

P (all ?a ?f) --> !x:T ?a, P (?f x).

(; Induction principle on N. ;)

def nat_ind : !p:N -> Prop, P (p 0) -> (!n, P (p n) -> P (p (s n))) -> !n, P (p n).

nat_ind _  ?u _  0      --> ?u.
nat_ind ?p ?u ?v (s ?n) --> ?v ?n (nat_ind ?p ?u ?v ?n).

(; Boolean equality on N. ;)

def beq : N->N->B.

beq 0 0 --> true.
beq (s ?x) (s ?y) --> beq ?x ?y.
beq 0 (s _) --> false.
beq (s _) 0 --> false.

(; Leibniz equality. ;)

eq : !a, T a -> T a -> Prop.

refl : !a, !x, P (eq a x x).

eqind : !a, !x, !y, P (eq a x y) -> !p : T a -> Prop, P (p x) -> P (p y).
(; FIXME: try to infer the type of p. ;)

(; Symmetry of the equality ;)
#PROOF eq_sym : !a, !x, !y, P (eq a x y) -> P (eq a y x).
#REFINE a => x => y => H => _.
#REFINE eqind a x y H (z => eq a z x) (refl a x).
#QED.

(; s is compatible with Leibniz equality ;)
#PROOF s_eq : !x, !y, P (eq nat x y) -> P (eq nat (s x) (s y)).
#REFINE x => y => xy => _.
#REFINE eqind nat x y xy (z => eq nat (s x) (s z)) (refl nat (s x)).
#QED.

(; 0 is right neutral for add. ;)
#PROOF add0r : !n, P (eq nat (add n 0) n).
(;FIXME: try to infer nat. ;)
#INFER nat_ind.
#REFINE (nat_ind (n => eq nat (add n 0) n) ?case0 ?caseS).
(;FIXME: try to infer predicate. ;) #PRINT.
#FOCUS 1. #PRINT.
#FOCUS 1. #PRINT.
(; Case 0 ;)
#SIMPL. #PRINT.
#REFINE (refl nat 0). #PRINT.
(; Case S ;)
#REFINE n => hn => _. #PRINT.
#SIMPL. #PRINT.
#REFINE s_eq (add n 0) n hn.
#QED.

(; forall n m, n + S m = S (n+m) ;)
#PROOF add_succ_r : !n, !m, P (eq nat (add n (s m)) (s (add n m))).
#REFINE n => m => _.
#REFINE (nat_ind (n:N => eq nat (add n (s m)) (s (add n m))) ?case0[n,m] ?caseS[n,m] n).
(; Case 0 ;)
#SIMPL.
#REFINE refl nat (s m). (; TO DO : ADD a #REFL tactic ;)
(; Case S ;)
#SIMPL.
#REFINE pn => ih => _.
#REWRITE ih.
#REFINE refl nat (s (s (add pn m))).
#QED.

(; Commutativity of the addition ;)
#PROOF addcomm : !n, !m, P (eq nat (add n m) (add m n)).
#REFINE n => m => _.
#REFINE (nat_ind (n:N => eq nat (add n m) (add m n)) ?case0[n,m] ?caseS[n,m] n).
(; Case 0 ;)
#SIMPL.
#REFINE eq_sym nat (add m 0) m (add0r m). (; TO DO : Add a #SYM tactic ;)
(; Case S ;)
#SIMPL.
#REFINE n => ih => _.
#REWRITE ih.
#REFINE eq_sym nat (add m (s n0)) (s (add m n0)) (add_succ_r m n0).
#QED.

(; At the moment, we can unfortunately use rewrite to prove anything
  because QED and the rewrite tactic does not check the whole term obtained.
  Once this is fixed, the following term won't typecheck anymore, which will
  be much beter ;)
#PROOF fixme : !a, !x, !y, P (eq a x y) -> (!goal, P goal).
#REFINE a => x => y => H => goal => _.
#REWRITE H.
#QED.
