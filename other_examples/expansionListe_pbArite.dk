#NAME bug.

nat : Type.
O : nat.
S : nat -> nat.

t : Type.
list : Type.

def lnt : nat -> Type.
[] lnt O --> list
[n] lnt (S n) --> t -> lnt n.

List : n : nat -> lnt n.
Nil : list.
Snoc : list -> t -> list.

def expandn : n : nat -> lnt n -> list -> lnt n.
[l] expandn O (List O) l --> l
[n,l,l',a] expandn (S n) l l' --> a : t => expandn n (l a) (Snoc l' a).

a : t.

#SNF expandn O (List (S O) a) Nil.
