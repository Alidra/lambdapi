#NAME AndPoly.

Bool : Type.
Nat : Type.

True : Bool.
False : Bool.

0 : Nat.
S : Nat -> Nat.

def Bool_ : Nat -> Type.
[]  Bool_ 0     --> Bool.
[n] Bool_ (S n) --> Bool -> Bool_ n.

def and : Bool -> Bool -> Bool.
[]  and False _ --> False.
[x] and True  x --> x.

(; Une façon de définir and d'arité variable qui est rejetée avec un message d'erreur clair :
All the rewrite rules for  the symbol 'and_' should have the same arity ;)
(;
def and_ : n : Nat -> Bool_ n.
[]      and_ 0             --> True.
[x]     and_ (S 0)     x   --> x.
[x,y,n] and_ (S (S n)) x y --> and_ (S n) (and x y).
(; ;)

(; Ici un and acceptant un nombre variable d'arguments qui type-check bien ;)

def and_ : n : Nat -> Bool_ n.
[]  and_ 0         --> True.
[x] and_ (S 0)     --> (x => x).
[n] and_ (S (S n)) --> (x : Bool => y : Bool =>  (and_ (S n) (and x y))).
(; ;)

(; Quand les patterns d'arités différentes sont imbriqués dans un sous-pattern, on obtient :
Assertion failed lors de la construction de l'arbre de décision 

def e : n : Nat -> Bool_ n -> Bool_ n.

def andb : n : Nat -> Bool_ n.
[]      e 0 (andb 0        ) --> True.
[x]     e 0 (andb (S 0) x  ) --> x.
[x,y,n] e n (andb _     x y) --> andb (S n) (and x y).
(; ;)