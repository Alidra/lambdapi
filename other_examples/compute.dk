(; Computational test. ;)
#NAME compute.

Nat : Type.
Z : Nat.
S : Nat -> Nat.

def plus : Nat -> Nat -> Nat.
[x]   plus Z     x --> x
[x,y] plus (S x) y --> plus x (S y).

def mult : Nat -> Nat -> Nat.
[]    mult Z     _ --> Z
[x,y] mult (S x) y --> plus y (mult x y).

def fact : Nat -> Nat.
[]  fact Z     --> S Z
[x] fact (S x) --> mult (S x) (fact x).

def six   : Nat := (S (S (S (S (S (S Z)))))).
def seven : Nat := (S (S (S (S (S (S (S Z))))))).
def eight : Nat := S seven.

(;
#CONV	plus (fact seven) (mult seven (fact seven)), fact eight.
(; ;)

(;
#CONV mult (fact seven) eight, fact eight.
(; ;)

(;
#CONV fact eight, plus (fact seven) (mult seven (fact seven)).
(; ;)