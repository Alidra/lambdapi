#NAME VectDependant.

Nat : Type.

0 : Nat.
S : Nat -> Nat.

elt : Type.
Vect : Nat -> Type.

Nil : Vect 0.
Cons : n : Nat -> elt -> Vect n -> Vect (S n).

def Tail : n : Nat -> Vect (S n) -> Vect n.
[n, x, l] Tail n (Cons _ x l) --> l.

def S_bis : Nat -> Nat.
[]  S_bis 0         --> S (S 0)
[]  S_bis (S 0)     --> S (S 0)
[n] S_bis (S (S n)) --> S (S (S_bis n)).

Cons_bis : n : Nat -> elt -> Vect n -> Vect (S_bis n).


def Tail_bis : n : Nat -> Vect (S_bis n) -> Vect n.
(; La règle non-linéaire, qui est acceptée pour le typage ;)
[n, x, l] Tail_bis n (Cons_bis n x l) --> l.
(; ;)
(; La règle linéaire, qui pose un problème de préservation du typage 
[n, x, l] Tail_bis n (Cons_bis _ x l) --> l.
(; ;)

e : elt.
def 1 := S 0.
def 2 := S 1.
def 3 := S 2.
def suite := Cons 2 e (Cons 1 e (Cons 0 e Nil)).

#CHECK Tail_bis 2 (Cons_bis 3 e suite) , Vect 2.
#CHECK suite , Vect 3.
(; Un double YES pour les CHECK, donc on ne veut pas pouvoir convertir l'un en l'autre ;)

def id_bis : n : Nat -> Vect (S_bis n) -> Vect (S_bis n).
(; Une règle qui devrait bien typée, mais qui nécessite de trouver (S_bis n) = (S_bis _), sous la contrainte (S_bis n) = (S_bis _), contrainte qui est jetée, car comme S_bis n'est pas injective, on ne peut rien en déduire en termes de substitution 
[n, x, l] id_bis n (Cons_bis _ x l) --> (Cons_bis n x l).
(; ;)
(; Sa version non-linéaire qui type-checke bien ;)
[n, x, l] id_bis n (Cons_bis n x l) --> (Cons_bis n x l).
(; ;)