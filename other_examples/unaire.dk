#NAME unaire.

Nat : Type.
Bool : Type.

0 : Nat.
S : Nat -> Nat.

True : Bool.
False : Bool.

def plus : Nat -> Nat -> Nat.
[n]    plus 0     n --> n.
[m, n] plus (S m) n --> plus m (S n).

def mult : Nat -> Nat -> Nat.
[]     mult 0     _ --> 0.
[m, n] mult (S m) n --> plus n (mult m n).

def neg : Bool -> Bool.
[] neg True  --> False.
[] neg False --> True.

def even : Nat -> Bool.
[]  even 0     --> True.
[n] even (S n) --> neg (even n).

def halfOf : Nat -> Nat.
[]  halfOf 0         --> 0.
[n] halfOf (S (S n)) --> S (halfOf n).

def ifThenElse : Bool -> Nat -> Nat -> Nat.
[x] ifThenElse True  x _ --> x.
[y] ifThenElse False _ y --> y.

def Syracuse : Nat -> Bool.
[]  Syracuse (S 0)     --> True.
[n] Syracuse (S (S n)) --> Syracuse (ifThenElse (even n) (S (halfOf n)) (S (mult (S (S (S 0))) (S (S n))))).

#EVAL Syracuse (S (S (S (S (S (S (S 0))))))).
