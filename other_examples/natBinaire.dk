#NAME Nat.

Nat : Type.
Bool : Type.

1 : Nat.
x2 : Nat -> Nat.
x2plus1 : Nat -> Nat.

T : Bool.
F : Bool.

def plus : Nat -> Nat -> Nat.
[]    plus 1           1           --> x2 1.
[y]   plus 1           (x2 y)      --> x2plus1 y.
[y]   plus 1           (x2plus1 y) --> x2 (plus 1 y).
[x]   plus (x2 x)      1           --> x2plus1 x.
[x,y] plus (x2 x)      (x2 y)      --> x2 (plus x y).
[x,y] plus (x2 x)      (x2plus1 y) --> x2plus1 (plus x y).
[x]   plus (x2plus1 x) 1           --> x2 (plus x 1).
[x,y] plus (x2plus1 x) (x2 y)      --> x2plus1 (plus x y).
[x,y] plus (x2plus1 x) (x2plus1 y) --> x2 (plus 1 (plus x y)).

def pred : Nat -> Nat.
[]  pred (x2 1)           --> 1.
[x] pred (x2 (x2 x))      --> plus (x2 x) (pred (x2 x)).
[x] pred (x2 (x2plus1 x)) --> x2plus1 (x2 x).
[x] pred (x2plus1 x)      --> x2 x.

def moins : Nat -> Nat -> Nat.
[x]   moins x 1           --> pred x.
[x,y] moins x (x2 y)      --> moins (pred x) (pred (x2 y)).
[x,y] moins x (x2plus1 y) --> moins (pred x) (x2 y).

def mult : Nat -> Nat -> Nat.
[x]   mult x           1           --> x.
[y]   mult 1           y           --> y.
[x,y] mult (x2 x)      (x2 y)      --> x2 (x2 (mult x y)).
[x,y] mult (x2 x)      (x2plus1 y) --> plus (x2 x) (x2 (x2 (mult x y))).
[x,y] mult (x2plus1 x) (x2 y)      --> plus (x2 y) (x2 (x2 (mult x y))).
[x,y] mult (x2plus1 x) (x2plus1 y) --> plus (x2 (x2 (mult x y))) (plus (x2 x) (x2plus1 y)).

def geq : Nat -> Nat -> Bool.
def greater : Nat -> Nat -> Bool.

[x]   geq x           1           --> T.
[y]   geq 1           (x2 y)      --> F.
[y]   geq 1           (x2plus1 y) --> F.
[x,y] geq (x2 x)      (x2 y)      --> geq x y.
[x,y] geq (x2 x)      (x2plus1 y) --> greater x y.
[x,y] geq (x2plus1 x) (x2 y)      --> geq x y.
[x,y] geq (x2plus1 x) (x2plus1 y) --> geq x y.

[y]   greater 1           y           --> F.
[x]   greater (x2 x)      1           --> T.
[x]   greater (x2plus1 x) 1           --> T.
[x,y] greater (x2 x)      (x2 y)      --> greater x y.
[x,y] greater (x2 x)      (x2plus1 y) --> greater x y.
[x,y] greater (x2plus1 x) (x2 y)      --> geq x y.
[x,y] greater (x2plus1 x) (x2plus1 y) --> greater x y.

def eq : Nat -> Nat -> Bool.
[]    eq 1           1           --> T.
[y]   eq 1           (x2 y)      --> F.
[y]   eq 1           (x2plus1 y) --> F.
[x]   eq (x2 x)      1           --> F.
[x,y] eq (x2 x)      (x2 y)      --> eq x y.
[x,y] eq (x2 x)      (x2plus1 y) --> F.
[x]   eq (x2plus1 x) 1           --> F.
[x,y] eq (x2plus1 x) (x2 y)      --> F.
[x,y] eq (x2plus1 x) (x2plus1 y) --> eq x y.