#REQUIRE other_examples.natBinaire.

#NAME IntBinaire.

Int : Type.

def Nat := other_examples.natBinaire.Nat.
def Bool := other_examples.natBinaire.Bool.

def T := other_examples.natBinaire.T.
def F := other_examples.natBinaire.F.

0 : Int.
Pos : Nat -> Int.
Neg : Nat -> Int.

def ifThenElse : Bool -> Int -> Int -> Int.
[x] ifThenElse T x _ --> x.
[y] ifThenElse F _ y --> y.

def plus : Int -> Int -> Int.
[x]   plus x       0       --> x.
[y]   plus 0       y       --> y.
[x,y] plus (Pos x) (Pos y) --> Pos (other_examples.natBinaire.plus x y).
[x,y] plus (Pos x) (Neg y) --> ifThenElse (other_examples.natBinaire.greater x y) (Pos (other_examples.natBinaire.moins x y)) (ifThenElse (other_examples.natBinaire.eq x y) 0 (Neg (other_examples.natBinaire.moins y x))).
[x,y] plus (Neg x) (Pos y) --> ifThenElse (other_examples.natBinaire.greater x y) (Neg (other_examples.natBinaire.moins x y)) (ifThenElse (other_examples.natBinaire.eq x y) 0 (Pos (other_examples.natBinaire.moins y x))).
[x,y] plus (Neg x) (Neg y) --> Neg (other_examples.natBinaire.plus x y).

def moins : Int -> Int -> Int.
[x]   moins x 0 --> x.
[x,y] moins x (Pos y) --> plus x (Neg y).
[x,y] moins x (Neg y) --> plus x (Pos y).

def mult : Int -> Int -> Int.
[]    mult 0       _       --> 0.
[]    mult _       0       --> 0.
[x,y] mult (Pos x) (Pos y) --> Pos (other_examples.natBinaire.mult x y).
[x,y] mult (Pos x) (Neg y) --> Neg (other_examples.natBinaire.mult x y).
[x,y] mult (Neg x) (Pos y) --> Neg (other_examples.natBinaire.mult x y).
[x,y] mult (Neg x) (Neg y) --> Pos (other_examples.natBinaire.mult x y).

def geq : Int -> Int -> Bool.
[]    geq 0       0       --> T.
[y]   geq 0       (Pos y) --> F.
[y]   geq 0       (Neg y) --> T.
[x]   geq (Pos x) 0       --> T.
[x,y] geq (Pos x) (Pos y) --> other_examples.natBinaire.geq x y.
[x,y] geq (Pos x) (Neg y) --> T.
[x]   geq (Neg x) 0       --> F.
[x,y] geq (Neg x) (Pos y) --> F.
[x,y] geq (Neg x) (Neg y) --> other_examples.natBinaire.geq y x.

#WHNF mult (Pos (other_examples.natBinaire.x2 (other_examples.natBinaire.x2plus1 other_examples.natBinaire.1))) (Pos (other_examples.natBinaire.x2 other_examples.natBinaire.1)).
